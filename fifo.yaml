swagger: '2.0'
basePath: /api/2
consumes:
  - applicaiton/json
produces:
  - applicaiton/json
info:
  version: 2.0.0
  title: Project-FiFo

###################
# PARAMETERS
###################
parameters:
  fulllistParam:
    name: full-list
    in: query
    description: Enables or disables the return ov objects rather then uuids
    required: false
    allowEmptyValue: false
    type: boolean
    format: boolean
  fulllistfieldsParam:
    name: full-list-fields
    in: query
    description: Fields to be returnd when full-list is enabled
    required: false
    format: string
    type: array
    items:
      type: string
    collectionFormat: csv

###################
# DEFINITIONS
###################
definitions:
  uuid:
    type: string
    pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
  permission:
    type: array
    items:
      type: string
  requirement:
    properties:
      attribute:
        type: string
      condition:
        type: string
      value:
        type: string
      weight:
        type: string
  apikey:
    properties:
      bearer: 
        type: string
      id:
        $ref: '#/definitions/uuid'      
  token:
    properties:
      client:
        $ref: '#/definitions/uuid'
      expiery:
        type: integer
      scope:
        type: array
        items:
          type: string
      type:
        enum:
          - 'refresh'
          - 'access'
      id:
        $ref: '#/definitions/uuid'
    required:
      - type
      - scope
      - id
  user:
    properties:
      keys:
        type: object
      metadata:
        type: object
      name:
        type: string
      org:
        $ref: '#/definitions/uuid'
      orgs:
        type: array
        items:
          $ref: '#/definitions/uuid'
      permissions:
        type: array
        items:
          $ref: '#/definitions/permission'
      roles:
        type: array
        items:
          $ref: '#/definitions/uuid'
      tokens:
        type: array
        items:
          $ref: '#/definitions/token'
      uuid:
        $ref: '#/definitions/uuid'
      yubikeys:
        type: array
        items:
          type: string
  client:
    properties:
      client_id:
        type: string
      metadata:
        type: object
      name:
        type: string
      redirect_uris: # TODO: THIS IS NOT CORRECT
        type: array
        items:
          type: string 
      permissions:
        type: array
        items:
          $ref: '#/definitions/permission'
      roles:
        type: array
        items:
          $ref: '#/definitions/uuid'
      type:
        type: string
      uuid:
        $ref: '#/definitions/uuid'
  role:
    properties:
      metadata:
        type: object
      name:
        type: string
      permissions: 
        type: array
        items:
          $ref: '#/definitions/permission'
      uuid:
        $ref: '#/definitions/uuid'
  grouping:
    properties:
      config:
        type: object
      metadata:
        type: object
      elements:
        type: array
        items:
          $ref: '#/definitions/uuid'
      name:
        type: string
      uuid:
        $ref: '#/definitions/uuid'
      type:
        type: string
        enum:
          - stack
          - cluster
  dataset:
    properties:
      metadata:
        type: object
      description:
        type: string
      image_size:
        type: integer
      imported:
        type: integer
      name:
        type: string
      networks:
        type: array
        items:
          type: object
      os:
        type: string
      requirements:
        type: array
        items:
          $ref: '#/definitions/requirement'
      status:
        type: string
      type:
        type: string
      version:
        type: string
      uuid:
        $ref: '#/definitions/uuid'
  hypervisor:
    properties:
      alias:
        type: string
      metadata:
        type: object
      characteristics:
        type: object
      etherstubs:
        type: object
      host:
        type: string
      networks:
        type: array
        items:
          type: string
      path:
        type: array
        items:
          type: string
      pools:
        type: object
      port:
        type: integer
      resources:
        type: object
      services:
        type: object
      sysinfo:
        type: object
      version:
        type: string
      virtualisation:
        type: array
        items:
          type: string
      uuid:
        $ref: '#/definitions/uuid'        
  iprange:
    properties:
      metadata:
        type: object
      name:
        type: string
      gateway:
        type: string
      netmask:
        type: string
      network:
        type: string
      tag:
        type: string
      free:
        type: array
        items:
          type: string
      used:
        type: array
        items:
          type: string
      uuid:
        $ref: '#/definitions/uuid'
  network:
    properties:
      metadata:
        type: object
      name:
        type: string
      ipranges:
        type: array
        items:
          $ref: '#/definitions/uuid'
      uuid:
        $ref: '#/definitions/uuid'

###################
# Path definitions
###################
paths:
  #------------------
  # Users
  #------------------
  '/users':
    get:
      tags:
        - 'users'
      summary: Lists all users visible to the user
      description: |
        See Get User for the fields available for full-list-fields.
      parameters:
        - $ref: '#/parameters/fulllistParam'
        - $ref: '#/parameters/fulllistfieldsParam'
      responses:
        '200':
          description: list of users
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/definitions/user'
                - $ref: '#/definitions/uuid'
    post:
      tags:
        - 'users'
      summary: Creates a new user
      description: |
        Creates a new user
      responses:
        303:
          description: Redirect to new user

  '/user/{uuid}':
    get:
      tags:
        - 'users'
      summary: Reads a user
      parameters:
        - name: uuid
          in: path
          description: uuid of the user
          required: true
          type: string
      responses:
        '200':
          description: returns a grouping
          schema:
            $ref: '#/definitions/user'
  '/users/{uuid}':
    parameters:
      - name: uuid
        in: path
        description: uuid of the user to modify
        required: true
        type: string
    put:
      tags:
        - 'users'
      summary: Changes the password of a user
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              password:
                description: new password to set
                type: string
      responses:
        '200':
          description: OK
    delete:
      tags:
        - 'users'
      summary: Deletes a user
      responses:
        '200':
          description: OK
  '/user/{uuid}/permissions/{permission}':
    parameters:
      - name: uuid
        in: path
        description: UUID of the user
        required: true
        type: string
      - name: permission
        in: path
        description: |
          the permission to grant as path i.e. 'some/funky/permission'
        required: true
        type: string
    get:
      tags:
        - 'users'
      summary: |
        Tests if a user has is allowed to perform an action. 
        Please note that 403 here does not mean the user is not allowed 
        but that the requesting token was not allowed to test for the client!
      responses:
        '200':
          description: OK
    put:
      tags:
        - 'users'
      summary: Grants a permission to a user
      responses:
        '200':
          description: OK
    delete:
      tags:
        - 'users'
      summary: Revokes a permission from a user
      responses:
        '200':
          description: OK
  '/user/{uuid}/role/{role}':
    parameters:
      - name: uuid
        in: path
        description: UUID of the user
        required: true
        type: string
      - name: role
        in: path
        description: UUID of the role to join
        required: true
        type: string
    put:
      tags:
        - 'users'
      summary: Gives a user a role
      responses:
        '200':
          description: OK
    delete:
      tags:
        - 'users'
      summary: Removes a role from a user
      responses:
        '200':
          description: OK
  '/users/{uuid}/keys' :
    put:
      tags:
        - 'users'
      summary: Adds a SSH key to a user
      parameters:
        - name: uuid
          in: path
          description: uuid of the user
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties: 
              keys:
                description: key/value pair for the key
                type: string
      responses:
        '200':
          description: OK
  '/users/{uuid}/keys/{key-id}' :
    delete:
      tags:
        - 'users'
      summary: Removes a SSH key from a user
      parameters:
        - name: uuid
          in: path
          description: UUID of the user
          required: true
          type: string
        - name: key-id
          in: path
          description: id if the key to delete
          required: true
          type: string
      responses:
        '200':
          description: OK
  '/users/{uuid}/yubikeys' :
    put:
      tags:
        - 'users'
      summary: Removes a SSH key from a user
      parameters:
        - name: uuid
          in: path
          description: uuid of the user
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties: 
              otp:
                description: OTP from the YubiKey to add
                type: string
      responses:
        '200':
          description: OK
  '/users/{uuid}/yubikeys/{key-id}' :
    delete:
      tags:
        - 'users'
      summary: Removes a SSH key from a user
      parameters:
        - name: uuid
          in: path
          description: UUID of the user
          required: true
          type: string
        - name: key-id
          in: path
          description: id if the key to delete
          required: true
          type: string
      responses:
        '200':
          description: OK
  '/users/{uuid}/orgs/{org}' :
    parameters:
      - name: uuid
        in: path
        description: uuid of the user
        required: true
        type: string
      - name: org
        in: path
        description: UUID of the org to join
        required: true
        type: string
    put:
      tags:
        - 'users'
      summary: |
        Adds a user to an Organisation. The first joined Organisation 
        will automatically be set as active. Any further Organisations 
        need to be selected as active by passing the 'active' parameter 
        in a JSON.
      parameters:
        - name: body
          in: body
          required: false
          schema:
            type: object
            properties: 
              active:
                description: used to set an org
                type: boolean
      responses:
        '200':
          description: OK
    delete:
      tags:
        - 'users'
      summary: Removes user from an organization
      responses:
        '200':
          description: OK
  '/users/{uuid}/tokens':
    post:
      tags:
        - 'users'
      summary: |
        Crates a API token for a user with a given scope, please keep in 
        mind that the reply to this request is THE ONLY TIME the bearer 
        token can be accessed!
      parameters:
        - name: uuid
          in: path
          description: uuid of the user
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties: 
              comment:
                description: A comment for the token
                type: string
              scopes:
                description: A list of scopes for the token
                type: array
                items:
                  type: string
      responses:
        '200':
          description: OK 
          schema:
            $ref: '#/definitions/apikey'
  '/users/{uuid}/tokens/{token-id}' :
    delete:
      tags:
        - 'users'
      summary: |
        Revokes a token, this applies equally for access and refresh tokens
      parameters:
        - name: uuid
          in: path
          description: UUID of the user
          required: true
          type: string
        - name: token-id
          in: path
          description: ID of the token to delete (not the token itself!)
          required: true
          type: string
      responses:
        '200':
          description: OK
  #------------------
  # Clients
  #------------------
  '/clients':
    get:
      tags:
        - 'clients'
      summary: Lists all clients visible to the user.
      description: |
        See Get Client for the fields available for 'full-list-fields'
      parameters:
        - $ref: '#/parameters/fulllistParam'
        - $ref: '#/parameters/fulllistfieldsParam'
      responses:
        '200':
          description: list of clients
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/definitions/client'
                - $ref: '#/definitions/uuid'
    post:
      tags:
        - 'clients'
      summary: Creates a new client
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              client:
                description: the ClientID
                type: string
              secre:
                description: the secret for the client
                type: string
      responses:
        303:
          description: Redirect to new client
  '/clients/{uuid}':
    get:
      tags:
        - 'clients'
      summary: Reads a client
      parameters:
        - name: uuid
          in: path
          description: uuid of the client
          required: true
          type: string
      responses:
        '200':
          description: returns a client
          schema:
            $ref: '#/definitions/client'
    put:
      tags:
        - 'clients'
      summary: Changes the 'secret' of a client
      parameters:
        - name: uuid
          in: path
          description: UUID of the client
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              secret:
                description: New secret for the client
                type: string
      responses:
        '200':
          description: OK
    delete:
      tags:
        - 'clients'
      summary: Deletes a Client
      parameters:
        - name: uuid
          in: path
          description: UUID of the client
          required: true
          type: string
      responses:
        '200':
          description: OK
  '/clients/{uuid}/permissions/{permission}':
    get:
      tags:
        - 'clients'
      summary: |
        Tests if a client has is allowed to perform an action. Please note 
        that 403 here does not mean the client is not allowed but that the 
        requesting token was not allowed to test for the client!
      parameters:
        - name: uuid
          in: path
          description: UUID of the client
          required: true
          type: string
        - name: permission
          in: path
          description: |
            the permission to test as path i.e. 'some/funky/permission'
          required: true
          type: string
      responses:
        '200':
          description: OK
    put:
      tags:
        - 'clients'
      summary: Grants a permission> to a client 
      parameters:
        - name: uuid
          in: path
          description: UUID of the client
          required: true
          type: string
        - name: permission
          in: path
          description: |
            the permission to test as path i.e. 'some/funky/permission'
          required: true
          type: string
      responses:
        '200':
          description: OK
    delete:
      tags:
        - 'clients'
      summary: Revokes a permission to a client 
      parameters:
        - name: uuid
          in: path
          description: UUID of the client
          required: true
          type: string
        - name: permission
          in: path
          description: |
            the permission to test as path i.e. 'some/funky/permission'
          required: true
          type: string
      responses:
        '200':
          description: OK
  '/clients/{uuid}/uris':
    post:
      tags:
        - 'clients'
      summary: Adds an URI to the valid redirect URI’s for this client 
      parameters:
        - name: uuid
          in: path
          description: UUID of the client
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              uri:
                description: the URI to add
                type: string         
      responses:
        '200':
          description: OK
  '/clients/{uuid}/uris/{id}':
    delete:
      tags:
        - 'clients'
      summary: Deletes key with given uuid for client with given uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the client
          required: true
          type: string
        - name: id
          in: path
          description: id of the URI to delete
          required: true
          type: integer
      responses:
        '200':
          description: OK
  #------------------
  # Roles
  #------------------
  '/roles':
    get:
      tags:
        - 'roles'
      summary: Lists all roles visible to the user
      description: |
        See Get Roles for the fields available for 'full-list-fields'
      parameters:
        - $ref: '#/parameters/fulllistParam'
        - $ref: '#/parameters/fulllistfieldsParam'
      responses:
        '200':
          description: list of roles
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/definitions/role'
                - $ref: '#/definitions/uuid'
    post:
      tags:
        - 'roles'
      summary: Creates a new role
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              name:
                description: Name of the role
                type: string
              secret:
                description: the secret for the client
                type: array
                items:
                  type: string
      responses:
        '303':
          description: Redirect to new client
  '/roles/{uuid}':
    get:
      tags:
        - 'roles'
      summary: Reads a role
      parameters:
        - name: uuid
          in: path
          description: UUID of the role
          required: true
          type: string
      responses:
        '200':
          description: returns a role
          schema:
            $ref: '#/definitions/role'
    delete:
      tags:
        - 'roles'
      summary: Deletes a role
      parameters:
        - name: uuid
          in: path
          description: UUID of the role
          required: true
          type: string
      responses:
        '200':
          description: OK
  '/roles/{uuid}/permissions/{permission}':
    put:
      tags:
        - 'roles'
      summary: Grants a permission to a role.
      parameters:
        - name: uuid
          in: path
          description: UUID of the role
          required: true
          type: string
        - name: permission
          in: path
          description: |
            the permission to grant as path i.e. 'some/funky/permission'
          required: true
          type: string
      responses:
        '200':
          description: OK
    delete:
      tags:
        - 'roles'
      summary: Revokes a permission from a role
      parameters:
        - name: uuid
          in: path
          description: UUID of the role
          required: true
          type: string
        - name: permission
          in: path
          description: |
            the permission to revoke as path i.e. 'some/funky/permission'
          required: true
          type: string
      responses:
        '200':
          description: OK
  #------------------
  # Groupings
  #------------------
  '/groupings':
    get:
      tags:
        - 'groupings'
      summary: list groupings
      description: |
        Lists all `Groupings` visible to the user, either by uuid or objects.
      parameters:
        - $ref: '#/parameters/fulllistParam'
        - $ref: '#/parameters/fulllistfieldsParam'
      responses:
        '200':
          description: list of groupings
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/definitions/grouping'
                - type: string
  '/groupings/{uuid}':
    get:
      tags:
        - 'groupings'
      summary: read grouping
      parameters:
        - name: uuid
          in: path
          description: uuid of the grouping to get
          required: true
          type: string
      responses:
        '200':
          description: returns a grouping
          schema:
            $ref: '#/definitions/grouping'
  '/groupings/{uuid}/elements/{other}':
    parameters:
      - name: uuid
        in: path
        description: uuid of the grouping to modify
        required: true
        type: string
      - name: other
        in: path
        description: uuid of the grouping to add
        required: true
        type: string
    put:
      tags:
        - 'groupings'
      summary: add an element to the grouping
      responses:
        '200':
          description: OK
    delete:
      tags:
        - 'groupings'
      summary: remove an vm from the grouping
      responses:
        '200':
          description: OK
  '/groupings/{uuid}/config/{path}':
    parameters:
      - name: uuid
        in: path
        description: uuid of the grouping to modify
        required: true
        type: string
      - name: path
        in: path
        description: path of the configuration key
        required: true
        type: string
    put:
      tags:
        - 'groupings'
      summary: Sets configuration value for a grouping
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
      responses:
        '200':
          description: OK
    delete:
      tags:
        - 'groupings'
      summary: Removes grouping configuration
      responses:
        '200':
          description: OK
  '/groupings/{uuid}/metadata/{path}':
    parameters:
      - name: uuid
        in: path
        description: uuid of the grouping to modify
        required: true
        type: string
      - name: path
        in: path
        description: path of the metadata key
        required: true
        type: string
    put:
      tags:
        - 'groupings'
      summary: Sets metadata value for a grouping
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
      responses:
        '200':
          description: OK
    delete:
      tags:
        - 'groupings'
      summary: Removes grouping metadata
      responses:
        '200':
          description: OK'
  #------------------
  # Datasets
  #------------------
  '/datasets':
    get:
      tags:
        - 'datasets'
      summary: Lists all Datasets visible to the user
      description: |
        See Get Dataset for the fields available for 'full-list-fields'
      parameters:
        - $ref: '#/parameters/fulllistParam'
        - $ref: '#/parameters/fulllistfieldsParam'
      responses:
        '200':
          description: list of datasets
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/definitions/dataset'
                - $ref: '#/definitions/uuid'
    post:
      tags:
        - 'datasets'
      summary: Imports a dataset form a imgapi compatible server
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              url:
                description: url of the manifest to import
                type: string
      responses:
        '303':
          description: Redirect to new org
  '/datasets/{uuid}':
    get:
      tags:
        - 'datasets'
      summary: Reads a Dataset
      parameters:
        - name: uuid
          in: path
          description: UUID of the datasets
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/dataset'
    delete:
      tags:
        - 'datasets'
      summary: Reads a Dataset
      parameters:
        - name: uuid
          in: path
          description: UUID of the datasets
          required: true
          type: string
      responses:
        '200':
          description: OK
    put:
      tags:
        - 'datasets'
      summary: |
        Uploads a manifest as 1st step of a dataset import from a local file
      parameters:
        - name: uuid
          in: path
          description: UUID of the dataset to import
          required: true
          type: string
      responses:
        '303':
          description: Redirect to new org
  '/datasets/{uuid}/dataset.gz':
    get:
      tags:
        - 'datasets'
      summary: Downloads a zVol
      parameters:
        - name: uuid
          in: path
          description: UUID of the datasets
          required: true
          type: string
      responses:
        '200':
          description: OK
    put:
      tags:
        - 'datasets'
      summary: |
        Uploads a zvol as 2nd step of a dataset import from a local file
      parameters:
        - name: uuid
          in: path
          description: UUID of the dataset to import
          required: true
          type: string
      responses:
        '303':
          description: Redirect to new org
  '/datasets/{uuid}/networks/{nic}':
    put:
      tags:
        - 'datasets'
      summary: Adds or modifies a nic on the dataset
      parameters:
        - name: uuid
          in: path
          description: UUID of the dataset to import
          required: true
          type: string
        - name: nic
          in: path
          description: name of the nic to add (i.e. 'net1')
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              description:
                description: description of the interface
                type: string
      responses:
        '200':
          description: OK
    delete:
      tags:
        - 'datasets'
      summary: Adds or modifies a nic on the dataset
      parameters:
        - name: uuid
          in: path
          description: UUID of the dataset to import
          required: true
          type: string
        - name: nic
          in: path
          description: name of the nic to add (i.e. 'net1')
          required: true
          type: string
      responses:
        '200':
          description: OK
  #------------------
  # Hypervisors
  #------------------
  '/hypervisors':
    get:
      tags:
        - 'hypervisors'
      summary: lists all hypervisors visible to the user
      description: |
        See 'get hypervisor' for the fields available for 'full-list-fields'
      parameters:
        - $ref: '#/parameters/fulllistParam'
        - $ref: '#/parameters/fulllistfieldsParam'
      responses:
        '200':
          description: list of hypervisors
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/definitions/hypervisor'
                - $ref: '#/definitions/uuid'
  '/hypervisors/{uuid}':
    get:
      tags:
        - 'hypervisors'
      summary: reads a hypervisor
      parameters:
        - name: uuid
          in: path
          description: uuid of the hypervisor
          required: true
          type: string
      responses:
        '200':
          description: returns an hypervisor
          schema:
            $ref: '#/definitions/hypervisor'
    delete:
      tags:
        - 'hypervisors'
      summary: |
        deletes a hypervisor. every vm still residing on this hypervisor 
        will either be put in 'limbo' when at least one full backup exists, 
        or be deleted if not.
      parameters:
        - name: uuid
          in: path
          description: uuid of the hypervisor
          required: true
          type: string
      responses:
        '200':
          description: ok
  '/hypervisors/{uuid}/characteristics/{path}':
    put:
      tags:
        - 'hypervisors'
      summary: |
        sets a hypervisor characteristic, this can be later used on rules 
        to match against.
      parameters:
        - name: uuid
          in: path
          description: uuid of the hypervisor
          required: true
          type: string
        - name: path
          in: path
          description: url path prefix of the characteristic
          required: true
          type: string
      responses:
        '200':
          description: ok
    delete:
      tags:
        - 'hypervisors'
      summary: removes a characteristic from a hypervisor
      parameters:
        - name: uuid
          in: path
          description: uuid of the hypervisor
          required: true
          type: string
        - name: path
          in: path
          description: url path to characteristic to delete
          required: true
          type: string
      responses:
        '200':
          description: ok
  '/hypervisors/{uuid}/config':
    put:
      tags:
        - 'hypervisors'
      summary: sets a configuration / alias of the hypervisor
      parameters:
        - name: uuid
          in: path
          description: uuid of the hypervisor
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              alias:
                description: new alias of the hypervisor
                type: string
      responses:
        '200':
          description: ok
  #------------------
  # IPRanges
  #------------------
  '/ipranges':
    get:
      tags:
        - 'ipranges'
      summary: Lists all IP Ranges visible to the user
      description: |
        See Get IP Range for the fields available for 'full-list-fields'
      parameters:
        - $ref: '#/parameters/fulllistParam'
        - $ref: '#/parameters/fulllistfieldsParam'
      responses:
        '200':
          description: list of ipranges
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/definitions/iprange'
                - $ref: '#/definitions/uuid'
    post:
      tags:
        - 'ipranges'
      summary: Creates a new ip range
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              name:
                description: name of the  ip range
                type: string
              tag:
                description: NIC Tag for the IP Range to use
                type: string
              subnet: 
                description: The network address of the subnet
                type: string
              netmask:
                description: The netmask of the subnet
                type: string
              gateway:
                description: The gateway of the subnet
                type: string
              first:
                description: First address to hand out (must be part of subnet!)
                type: string
              last:
                description: Last address to hand out (must be part of subnet!)
                type: string
              vlan: 
                description: VLan to tag the nics with
                type: integer
      responses:
        '303':
          description: Redirect to new org
  '/ipranges/{uuid}':
    get:
      tags:
        - 'ipranges'
      summary: Reads a IP Range
      parameters:
        - name: uuid
          in: path
          description: UUID of the ip range
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/iprange'
    put:
      tags:
        - 'ipranges'
      summary: Claims an IP Address from the range
      parameters:
        - name: uuid
          in: path
          description: UUID of the ip range
          required: true
          type: string
      responses:
        '200':
          description: OK
  '/ipranges/{uuid}/{ip}':
    put:
      tags:
        - 'ipranges'
      summary: Releases an IP
      parameters:
        - name: uuid
          in: path
          description: UUID of the ip range
          required: true
          type: string
        - name: ip
          in: path
          description: IP Address to release
          required: true
          type: string
      responses:
        '200':
          description: OK
  #------------------
  # Networks
  #------------------
  '/networks':
    get:
      tags:
        - 'networks'
      summary: |
        Lists all networks visible to the user. 
      description: |
        See 'Get Network' for the fields available for 'full-list-fields'
      parameters:
        - $ref: '#/parameters/fulllistParam'
        - $ref: '#/parameters/fulllistfieldsParam'
      responses:
        '200':
          description: list of networks
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/definitions/network'
                - $ref: '#/definitions/uuid'
    post:
      tags:
        - 'networks'
      summary: Creates a new network
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              name:
                description: name of the network
                type: string
      responses:
        '303':
          description: Redirect to new org
  '/networks/{uuid}':
    get:
      tags:
        - 'networks'
      summary: reads a network
      parameters:
        - name: uuid
          in: path
          description: uuid of the network
          required: true
          type: string
      responses:
        '200':
          description: list of networks
          schema:
            $ref: '#/definitions/uuid'
    delete:
      tags:
        - 'networks'
      summary: deletes a network
      parameters:
        - name: uuid
          in: path
          description: uuid of the network
          required: true
          type: string
      responses:
        '200':
          description: OK
  '/networks/{uuid}/iprange/{iprange}':
    put:
      tags:
        - 'networks'
      summary: Adds an iprange to a network
      parameters:
        - name: uuid
          in: path
          description: uuid of the user to delete
          required: true
          type: string
        - name: iprange
          in: path
          description: uuid of the iprange to add
          required: true
          type: string
      responses:
        '200':
          description: OK
    delete:
      tags:
        - 'networks'
      summary: Removes an IP Range from an network
      parameters:
        - name: uuid
          in: path
          description: uuid of the user to delete
          required: true
          type: string
        - name: iprange
          in: path
          description: uuid of the iprange to add
          required: true
          type: string
      responses:
        '200':
          description: OK