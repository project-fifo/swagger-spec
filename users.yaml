swagger: '2.0'
basePath: /api/2
consumes:
  - applicaiton/json
produces:
  - applicaiton/json
info:
  version: 2.0.0
  title: Project-FiFo
parameters:
  fulllistParam:
    name: full-list
    in: query
    description: Enables or disables the return ov objects rather then uuids
    required: false
    allowEmptyValue: false
    type: boolean
    format: boolean
  fulllistfieldsParam:
    name: full-list-fields
    in: query
    description: Fields to be returnd when full-list is enabled
    required: false
    format: string
    type: array
    items:
      type: string
    collectionFormat: csv
definitions:
  uuid:
    type: string
    pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
  permission:
    type: array
    items:
      type: string
  token:
    properties:
      client:
        $ref: '#/definitions/uuid'
      expiery:
        type: integer
      scope:
        type: array
        items:
          type: string
      type:
        enum:
          - 'refresh'
          - 'access'
      id:
        $ref: '#/definitions/uuid'
    required:
      - type
      - scope
      - id
  user:
    properties:
      keys:
        type: object
      metadata:
        type: object
      name:
        type: string
      org:
        $ref: '#/definitions/uuid'
      orgs:
        type: array
        items:
          $ref: '#/definitions/uuid'
      permissions:
        type: array
        items:
          $ref: '#/definitions/permission'
      roles:
        type: array
        items:
          $ref: '#/definitions/uuid'
      tokens:
        type: array
        items:
          $ref: '#/definitions/token'
      uuid:
        $ref: '#/definitions/uuid'
      yubikeys:
        type: array
        items:
          type: string
  apikey:
    properties:
      bearer: 
        type: string
      id:
        $ref: '#/definitions/uuid'

paths:
  '/users':
    get:
      tags:
        - 'users'
      summary: Lists all users visible to the user
      description: |
        See Get User for the fields available for full-list-fields.
      parameters:
        - $ref: '#/parameters/fulllistParam'
        - $ref: '#/parameters/fulllistfieldsParam'
      responses:
        '200':
          description: list of users
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/definitions/user'
                - $ref: '#/definitions/uuid'
    post:
      tags:
        - 'users'
      summary: Creates a new user
      description: |
        Creates a new user
      responses:
        '303':
          description: Redirect to new user

  '/user/{uuid}':
    get:
      tags:
        - 'users'
      summary: Reads a user
      parameters:
        - name: uuid
          in: path
          description: uuid of the user
          required: true
          type: string
      responses:
        '200':
          description: returns a user
          schema:
            $ref: '#/definitions/user'
  '/users/{uuid}':
    put:
      tags:
        - 'users'
      summary: Changes the password of a user
      parameters:
        - name: uuid
          in: path
          description: uuid of the user to modify
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              password:
                description: new password to set
                type: string
      responses:
        '200':
          description: OK
  '/users/{uuid}':
    delete:
      tags:
        - 'users'
      summary: Deletes a user
      parameters:
        - name: uuid
          in: path
          description: uuid of the user to delete
          required: true
          type: string
      responses:
        '200':
          description: OK
  '/user/{uuid}/permissions/{permission}':
    get:
      tags:
        - 'users'
      summary: |
        Tests if a user has is allowed to perform an action. 
        Please note that 403 here does not mean the user is not allowed 
        but that the requesting token was not allowed to test for the client!
      parameters:
        - name: uuid
          in: path
          description: UUID of the user
          required: true
          type: string
        - name: permission
          in: path
          description: |
            the permission to test as path i.e. 'some/funky/permission'
          required: true
          type: string
      responses:
        '200':
          description: OK
    put:
      tags:
        - 'users'
      summary: Grants a permission to a user
      parameters:
        - name: uuid
          in: path
          description: UUID of the user
          required: true
          type: string
        - name: permission
          in: path
          description: |
            the permission to grant as path i.e. 'some/funky/permission'
          required: true
          type: string
      responses:
        '200':
          description: OK
    delete:
      tags:
        - 'users'
      summary: Revokes a permission from a user
      parameters:
        - name: uuid
          in: path
          description: UUID of the user
          required: true
          type: string
        - name: permission
          in: path
          description: |
            the permission to revoke as path i.e. 'some/funky/permission'
          required: true
          type: string
      responses:
        '200':
          description: OK
  '/user/{uuid}/role/{role}':
    put:
      tags:
        - 'users'
      summary: Gives a user a role
      parameters:
        - name: uuid
          in: path
          description: UUID of the user
          required: true
          type: string
        - name: role
          in: path
          description: UUID of the role to join
          required: true
          type: string
      responses:
        '200':
          description: OK
    delete:
      tags:
        - 'users'
      summary: Removes a role from a user
      parameters:
        - name: uuid
          in: path
          description: UUID of the user
          required: true
          type: string
        - name: role
          in: path
          description: UUID of the role to join
          required: true
          type: string
      responses:
        '200':
          description: OK
  '/users/{uuid}/keys' :
    put:
      tags:
        - 'users'
      summary: Adds a SSH key to a user
      parameters:
        - name: uuid
          in: path
          description: uuid of the user
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties: 
              keys:
                description: key/value pair for the key
                type: string
      responses:
        '200':
          description: OK
  '/users/{uuid}/keys/{key-id}' :
    delete:
      tags:
        - 'users'
      summary: Removes a SSH key from a user
      parameters:
        - name: uuid
          in: path
          description: UUID of the user
          required: true
          type: string
        - name: key-id
          in: path
          description: id if the key to delete
          required: true
          type: string
      responses:
        '200':
          description: OK
  '/users/{uuid}/yubikeys' :
    put:
      tags:
        - 'users'
      summary: Removes a SSH key from a user
      parameters:
        - name: uuid
          in: path
          description: uuid of the user
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties: 
              otp:
                description: OTP from the YubiKey to add
                type: string
      responses:
        '200':
          description: OK
  '/users/{uuid}/yubikeys/{key-id}' :
    delete:
      tags:
        - 'users'
      summary: Removes a SSH key from a user
      parameters:
        - name: uuid
          in: path
          description: UUID of the user
          required: true
          type: string
        - name: key-id
          in: path
          description: id if the key to delete
          required: true
          type: string
      responses:
        '200':
          description: OK
  '/users/{uuid}/orgs/{org}' :
    put:
      tags:
        - 'users'
      summary: |
        Adds a user to an Organisation. The first joined Organisation 
        will automatically be set as active. Any further Organisations 
        need to be selected as active by passing the 'active' parameter 
        in a JSON.
      parameters:
        - name: uuid
          in: path
          description: uuid of the user
          required: true
          type: string
        - name: org
          in: path
          description: UUID of the org to join
          required: true
          type: string
        - name: body
          in: body
          required: false
          schema:
            type: object
            properties: 
              active:
                description: used to set an org
                type: boolean
      responses:
        '200':
          description: OK
    delete:
      tags:
        - 'users'
      summary: Removes user from an organization
      parameters:
        - name: uuid
          in: path
          description: uuid of the user
          required: true
          type: string
        - name: org
          in: path
          description: UUID of the org to join
          required: true
          type: string
      responses:
        '200':
          description: OK
  '/users/{uuid}/tokens':
    post:
      tags:
        - 'users'
      summary: |
        Crates a API token for a user with a given scope, please keep in 
        mind that the reply to this request is THE ONLY TIME the bearer 
        token can be accessed!
      parameters:
        - name: uuid
          in: path
          description: uuid of the user
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties: 
              comment:
                description: A comment for the token
                type: string
              scopes:
                description: A list of scopes for the token
                type: array
                items:
                  type: string
      responses:
        '200':
          description: OK 
          schema:
            $ref: '#/definitions/apikey'
  '/users/{uuid}/tokens/{token-id}' :
    delete:
      tags:
        - 'users'
      summary: |
        Revokes a token, this applies equally for access and refresh tokens
      parameters:
        - name: uuid
          in: path
          description: UUID of the user
          required: true
          type: string
        - name: token-id
          in: path
          description: ID of the token to delete (not the token itself!)
          required: true
          type: string
      responses:
        '200':
          description: OK