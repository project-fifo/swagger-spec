{
    "swagger": "2.0",
    "basePath": "/api/3",
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "info": {
        "version": "3.0.0",
        "title": "Project-FiFo"
    },
    "parameters": {
        "fulllistParam": {
            "name": "full-list",
            "in": "query",
            "description": "Enables or disables the return ov objects rather then uuids",
            "required": false,
            "allowEmptyValue": false,
            "type": "boolean",
            "format": "boolean"
        },
        "fulllistfieldsParam": {
            "name": "full-list-fields",
            "in": "query",
            "description": "Fields to be returnd when full-list is enabled",
            "required": false,
            "format": "string",
            "type": "array",
            "items": {
                "type": "string"
            },
            "collectionFormat": "csv"
        }
    },
    "definitions": {
        "uuid": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "metrics": {
            "type": "object",
            "properties": {
                "<key>": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "permission": {
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "requirement": {
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "weight": {
                            "type": "string",
                            "enum": [
                                "scale"
                            ]
                        },
                        "attribute": {
                            "type": "string"
                        },
                        "low": {
                            "type": "integer"
                        },
                        "high": {
                            "type": "integer"
                        }
                    }
                },
                {
                    "type": "object",
                    "properties": {
                        "weight": {
                            "type": "string",
                            "enum": [
                                "random"
                            ]
                        },
                        "low": {
                            "type": "integer"
                        },
                        "high": {
                            "type": "integer"
                        }
                    }
                },
                {
                    "type": "object",
                    "properties": {
                        "attribute": {
                            "type": "string"
                        },
                        "condition": {
                            "type": "string",
                            "enum": [
                                ">=",
                                "=<",
                                ">",
                                "<",
                                "=:=",
                                "=/=",
                                "superset",
                                "subset",
                                "disjoint",
                                "element"
                            ]
                        },
                        "value": {
                            "allOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "integer"
                                    }
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            ]
                        },
                        "weight": {
                            "allOf": [
                                {
                                    "type": "string",
                                    "enum": [
                                        "must",
                                        "cant"
                                    ]
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "apikey": {
            "properties": {
                "bearer": {
                    "type": "string"
                },
                "id": {
                    "$ref": "#/definitions/uuid"
                }
            }
        },
        "token": {
            "properties": {
                "client": {
                    "$ref": "#/definitions/uuid"
                },
                "expiery": {
                    "type": "integer"
                },
                "scope": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "enum": [
                        "refresh",
                        "access"
                    ]
                },
                "id": {
                    "$ref": "#/definitions/uuid"
                }
            },
            "required": [
                "type",
                "scope",
                "id"
            ]
        },
        "cdr": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object"
                },
                "resource": {
                    "$ref": "#/definitions/uuid"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "user": {
            "properties": {
                "keys": {
                    "type": "object"
                },
                "metadata": {
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "org": {
                    "$ref": "#/definitions/uuid"
                },
                "orgs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/uuid"
                    }
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/permission"
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/uuid"
                    }
                },
                "tokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/token"
                    }
                },
                "uuid": {
                    "$ref": "#/definitions/uuid"
                },
                "yubikeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "client": {
            "properties": {
                "client_id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "redirect_uris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/permission"
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/uuid"
                    }
                },
                "type": {
                    "type": "string"
                },
                "uuid": {
                    "$ref": "#/definitions/uuid"
                }
            }
        },
        "role": {
            "properties": {
                "metadata": {
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/permission"
                    }
                },
                "uuid": {
                    "$ref": "#/definitions/uuid"
                }
            }
        },
        "org": {
            "properties": {
                "metadata": {
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uuid": {
                    "$ref": "#/definitions/uuid"
                }
            }
        },
        "grouping": {
            "properties": {
                "config": {
                    "type": "object"
                },
                "metadata": {
                    "type": "object"
                },
                "elements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/uuid"
                    }
                },
                "name": {
                    "type": "string"
                },
                "uuid": {
                    "$ref": "#/definitions/uuid"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "stack",
                        "cluster"
                    ]
                }
            }
        },
        "dataset": {
            "properties": {
                "metadata": {
                    "type": "object"
                },
                "description": {
                    "type": "string"
                },
                "image_size": {
                    "type": "integer"
                },
                "imported": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "os": {
                    "type": "string"
                },
                "requirements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/requirement"
                    }
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "uuid": {
                    "$ref": "#/definitions/uuid"
                }
            }
        },
        "hypervisor": {
            "properties": {
                "alias": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object"
                },
                "characteristics": {
                    "type": "object"
                },
                "etherstubs": {
                    "type": "object"
                },
                "host": {
                    "type": "string"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "path": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pools": {
                    "type": "object"
                },
                "port": {
                    "type": "integer"
                },
                "resources": {
                    "type": "object"
                },
                "services": {
                    "type": "object"
                },
                "sysinfo": {
                    "type": "object"
                },
                "version": {
                    "type": "string"
                },
                "virtualisation": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uuid": {
                    "$ref": "#/definitions/uuid"
                }
            }
        },
        "vm": {
            "type": "object",
            "properties": {
                "alias": {
                    "type": "string"
                },
                "backups": {
                    "type": "object",
                    "properties": {
                        "comment": {
                            "type": "string"
                        },
                        "files": {
                            "type": "object",
                            "properties": {
                                "<file>": {
                                    "type": "object",
                                    "properties": {
                                        "sha1": {
                                            "type": "string"
                                        },
                                        "size": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            }
                        },
                        "local": {
                            "type": "boolean"
                        },
                        "local_size": {
                            "type": "integer"
                        },
                        "pending": {
                            "type": "boolean"
                        },
                        "state": {
                            "type": "string",
                            "enum": [
                                "completed",
                                "pending"
                            ]
                        },
                        "xml": {
                            "type": "boolean"
                        }
                    }
                },
                "config": {
                    "type": "object"
                },
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "$ref": "#/definitions/uuid"
                },
                "dataset": {
                    "$ref": "#/definitions/uuid"
                },
                "hypervisor": {
                    "$ref": "#/definitions/uuid"
                },
                "package": {
                    "$ref": "#/definitions/uuid"
                },
                "owner": {
                    "$ref": "#/definitions/uuid"
                },
                "hostname_mappings": {
                    "type": "object"
                },
                "iprange_mappings": {
                    "type": "object"
                },
                "network_mappings": {
                    "type": "object"
                },
                "uuid": {
                    "$ref": "#/definitions/uuid"
                },
                "docker": {
                    "type": "object"
                }
            }
        },
        "iprange": {
            "properties": {
                "metadata": {
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "gateway": {
                    "type": "string"
                },
                "netmask": {
                    "type": "string"
                },
                "network": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                },
                "free": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "used": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uuid": {
                    "$ref": "#/definitions/uuid"
                }
            }
        },
        "network": {
            "properties": {
                "metadata": {
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "ipranges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/uuid"
                    }
                },
                "uuid": {
                    "$ref": "#/definitions/uuid"
                }
            }
        },
        "package": {
            "properties": {
                "metadata": {
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "compression": {
                    "type": "string"
                },
                "cpu_cap": {
                    "type": "integer"
                },
                "quota": {
                    "type": "integer"
                },
                "ram": {
                    "type": "integer"
                },
                "org_resources": {
                    "type": "object"
                },
                "requirements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/requirement"
                    }
                },
                "uuid": {
                    "$ref": "#/definitions/uuid"
                }
            }
        }
    },
    "paths": {
        "/oauth2/auth": {
            "get": {
                "tags": [
                    "oauth"
                ],
                "summary": "OAuth2 Authorization Code Request and Implict Request",
                "description": "This endpoint serves both 'Authorization Code Request' and the\n'Implict Request' parts of the OAuth 2 workflow depending on the\n*response_type* provided.\n",
                "parameters": [
                    {
                        "name": "response_type",
                        "in": "query",
                        "type": "string",
                        "required": true,
                        "enum": [
                            "code",
                            "token"
                        ]
                    },
                    {
                        "name": "client_id",
                        "in": "query",
                        "type": "string",
                        "required": true,
                        "description": "ID of the client"
                    },
                    {
                        "name": "redirect_uri",
                        "in": "query",
                        "type": "string",
                        "description": "The URI redirected to at the end of the OAuth2 dance",
                        "required": true
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "type": "string",
                        "description": "client state that gets passed back to the redirect uri"
                    },
                    {
                        "name": "scope",
                        "in": "query",
                        "type": "string",
                        "description": "list of scopes to claim"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Redirect to new user"
                    }
                }
            },
            "post": {
                "tags": [
                    "oauth"
                ],
                "summary": "Authorization Code grant and",
                "description": "Serves both the Authorization Code Grant and Implict Grant\n* [4.1.1 Authorization Code Grant / Authorization Request](https://tools.ietf.org/html/rfc6749#section-4.1.1)\n* [4.2.1 Implicit Grant / Authorization Request](https://tools.ietf.org/html/rfc6749#section-4.2.1)\n",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "response_type": {
                                    "type": "string",
                                    "enum": [
                                        "code",
                                        "token"
                                    ]
                                },
                                "client_id": {
                                    "type": "string",
                                    "description": "ID of the client"
                                },
                                "redirect_uri": {
                                    "type": "string",
                                    "description": "The URI redirected to at the end of the OAuth2 dance"
                                },
                                "scope": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "list of scopes to claim"
                                },
                                "state": {
                                    "type": "string",
                                    "description": "client state that gets passed back to the redirect uri"
                                },
                                "username": {
                                    "type": "string",
                                    "description": "the username"
                                },
                                "password": {
                                    "type": "string",
                                    "description": "the password"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirects to the redirect_uri with the `access_code` as query\nparameter.\n"
                    }
                }
            }
        },
        "/oauth2/token": {
            "post": {
                "tags": [
                    "oauth"
                ],
                "summary": "OAuth2 token endpoint",
                "description": "This endpoint serves the following parts of the OAuth workflow, please\nsee the linked specifications for details as it does not fit the swagger\nspec definition language.\n* [4.1.3 Access Token Request](https://tools.ietf.org/html/rfc6749#section-4.1.3)\n* [4.4.2 Access Token Request](https://tools.ietf.org/html/rfc6749#section-4.4.2)\n* [4.2.1 Implicit Grant / Authorization Request](https://tools.ietf.org/html/rfc6749#section-4.2.1)\n* [4.3 Resource Owner Password Credentials Grant](https://tools.ietf.org/html/rfc6749#section-4.3)\n* [6 Refreshing an Access Token](https://tools.ietf.org/html/rfc6749#section-6)\n",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "grant_type": {
                                    "type": "string",
                                    "enum": [
                                        "authorization_code",
                                        "client_credentials",
                                        "refresh_token",
                                        "password"
                                    ]
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The token was sucessfully provided.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "access_token": {
                                    "type": "string"
                                },
                                "token_type": {
                                    "type": "string",
                                    "enum": [
                                        "bearer"
                                    ]
                                },
                                "expires_in": {
                                    "type": "integer"
                                },
                                "refresh_token": {
                                    "type": "string",
                                    "description": "Only for Access Token Request"
                                },
                                "scope": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/scopes": {
            "get": {
                "tags": [
                    "scope"
                ],
                "summary": "lists the scopes",
                "responses": {
                    "200": {
                        "description": "The list of the",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "default": {
                                        "type": "boolean",
                                        "description": "weather this scope is a default scope or not"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "the description of the scope"
                                    },
                                    "scope": {
                                        "type": "string",
                                        "description": "the name of the scope"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sessions": {
            "delete": {
                "tags": [
                    "oauth",
                    "sessions"
                ],
                "summary": "deletes a token",
                "responses": {
                    "204": {
                        "description": "ok"
                    }
                }
            },
            "get": {
                "tags": [
                    "sessions",
                    "users"
                ],
                "summary": "retrieves information about the current session",
                "responses": {
                    "200": {
                        "description": "the logged in user",
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    }
                }
            }
        },
        "/sessions/one_time_token": {
            "get": {
                "tags": [
                    "oauth",
                    "sessions"
                ],
                "summary": "creates a one time toke",
                "description": "FiFo uses one time tokens to secure web socket, that way\nthe token can be passed as a query parameter without securty\nconcerns since it will be only valid for a single use. One time\ntokens have a very short lifetime and will be invalidated after\nthe first use.\n",
                "responses": {
                    "200": {
                        "description": "the token and experiey",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "token": {
                                    "type": "string",
                                    "description": "the token"
                                },
                                "expiery": {
                                    "type": "integer",
                                    "description": "lifetime of the token in seconds"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Lists all users visible to the user",
                "description": "See Get User for the fields available for full-list-fields.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/fulllistParam"
                    },
                    {
                        "$ref": "#/parameters/fulllistfieldsParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/user"
                                    },
                                    {
                                        "$ref": "#/definitions/uuid"
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Creates a new user",
                "description": "Creates a new user\n",
                "responses": {
                    "303": {
                        "description": "Redirect to new user"
                    }
                }
            }
        },
        "/user/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "description": "uuid of the user",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Reads a user",
                "responses": {
                    "200": {
                        "description": "returns a grouping",
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Changes the password of a user",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "password": {
                                    "description": "new password to set",
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Deletes a user",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/user/{uuid}/permissions/{permission}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "description": "UUID of the user",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "permission",
                    "in": "path",
                    "description": "the permission to grant as path i.e. 'some/funky/permission'\n",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Test user permission",
                "description": "Tests if a user has is allowed to perform an action.\nPlease note that 403 here does not mean the user is not allowed\nbut that the requesting token was not allowed to test for the client!\n",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Grants a permission to a user",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Revokes a permission from a user",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/user/{uuid}/role/{role}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "description": "UUID of the user",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "role",
                    "in": "path",
                    "description": "UUID of the role to join",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Gives a user a role",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Removes a role from a user",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/users/{uuid}/keys": {
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Adds a SSH key to a user",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the user",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "keys": {
                                    "description": "key/value pair for the key",
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/users/{uuid}/keys/{key-id}": {
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Removes a SSH key from a user",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the user",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key-id",
                        "in": "path",
                        "description": "id if the key to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/users/{uuid}/yubikeys": {
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Removes a SSH key from a user",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the user",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "otp": {
                                    "description": "OTP from the YubiKey to add",
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/users/{uuid}/yubikeys/{key-id}": {
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Removes a SSH key from a user",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the user",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key-id",
                        "in": "path",
                        "description": "id if the key to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/users/{uuid}/orgs/{org}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "description": "uuid of the user",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "org",
                    "in": "path",
                    "description": "UUID of the org to join",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Adds a user to an Organisation.",
                "description": "The first joined Organisation\nwill automatically be set as active. Any further Organisations\nneed to be selected as active by passing the 'active' parameter\nin a JSON.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "active": {
                                    "description": "used to set an org",
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Removes user from an organization",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/users/{uuid}/tokens": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Crates a API token",
                "description": "Crates a API token for a user with a given scope, please keep in\nmind that the reply to this request is THE ONLY TIME the bearer\ntoken can be accessed!\n",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the user",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "comment": {
                                    "description": "A comment for the token",
                                    "type": "string"
                                },
                                "scopes": {
                                    "description": "A list of scopes for the token",
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apikey"
                        }
                    }
                }
            }
        },
        "/users/{uuid}/tokens/{token-id}": {
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Revokes a token.",
                "description": "This applies equally for access and refresh tokens\n",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the user",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "token-id",
                        "in": "path",
                        "description": "ID of the token to delete (not the token itself!)",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/clients": {
            "get": {
                "tags": [
                    "clients"
                ],
                "summary": "Lists all clients visible to the user.",
                "description": "See Get Client for the fields available for 'full-list-fields'\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/fulllistParam"
                    },
                    {
                        "$ref": "#/parameters/fulllistfieldsParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list of clients",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/client"
                                    },
                                    {
                                        "$ref": "#/definitions/uuid"
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "clients"
                ],
                "summary": "Creates a new client",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "client": {
                                    "description": "the ClientID",
                                    "type": "string"
                                },
                                "secre": {
                                    "description": "the secret for the client",
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "303": {
                        "description": "Redirect to new client"
                    }
                }
            }
        },
        "/clients/{uuid}": {
            "get": {
                "tags": [
                    "clients"
                ],
                "summary": "Reads a client",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the client",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns a client",
                        "schema": {
                            "$ref": "#/definitions/client"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "clients"
                ],
                "summary": "Changes the 'secret' of a client",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the client",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "secret": {
                                    "description": "New secret for the client",
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "tags": [
                    "clients"
                ],
                "summary": "Deletes a Client",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the client",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/clients/{uuid}/permissions/{permission}": {
            "get": {
                "tags": [
                    "clients"
                ],
                "summary": "Tests if a client has is allowed to perform an action.",
                "description": "Please note that 403 here does not mean the client is not allowed but that the\nrequesting token was not allowed to test for the client!\n",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the client",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "permission",
                        "in": "path",
                        "description": "the permission to test as path i.e. 'some/funky/permission'\n",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "put": {
                "tags": [
                    "clients"
                ],
                "summary": "Grants a permission> to a client",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the client",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "permission",
                        "in": "path",
                        "description": "the permission to test as path i.e. 'some/funky/permission'\n",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "tags": [
                    "clients"
                ],
                "summary": "Revokes a permission to a client",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the client",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "permission",
                        "in": "path",
                        "description": "the permission to test as path i.e. 'some/funky/permission'\n",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/clients/{uuid}/uris": {
            "post": {
                "tags": [
                    "clients"
                ],
                "summary": "Adds an URI to the valid redirect URI’s for this client",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the client",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "uri": {
                                    "description": "the URI to add",
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/clients/{uuid}/uris/{id}": {
            "delete": {
                "tags": [
                    "clients"
                ],
                "summary": "Deletes key with given uuid for client with given uuid",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the client",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the URI to delete",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/roles": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Lists all roles visible to the user",
                "description": "See Get Roles for the fields available for 'full-list-fields'\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/fulllistParam"
                    },
                    {
                        "$ref": "#/parameters/fulllistfieldsParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list of roles",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/role"
                                    },
                                    {
                                        "$ref": "#/definitions/uuid"
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "roles"
                ],
                "summary": "Creates a new role",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "description": "Name of the role",
                                    "type": "string"
                                },
                                "secret": {
                                    "description": "the secret for the client",
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "303": {
                        "description": "Redirect to new client"
                    }
                }
            }
        },
        "/roles/{uuid}": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Reads a role",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the role",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns a role",
                        "schema": {
                            "$ref": "#/definitions/role"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "roles"
                ],
                "summary": "Deletes a role",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the role",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/roles/{uuid}/permissions/{permission}": {
            "put": {
                "tags": [
                    "roles"
                ],
                "summary": "Grants a permission to a role.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the role",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "permission",
                        "in": "path",
                        "description": "the permission to grant as path i.e. 'some/funky/permission'\n",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "tags": [
                    "roles"
                ],
                "summary": "Revokes a permission from a role",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the role",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "permission",
                        "in": "path",
                        "description": "the permission to revoke as path i.e. 'some/funky/permission'\n",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/orgs": {
            "get": {
                "tags": [
                    "orgs"
                ],
                "summary": "Lists all organizations visible to the user.",
                "description": "See Get Org for the fields available for 'full-list-fields'\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/fulllistParam"
                    },
                    {
                        "$ref": "#/parameters/fulllistfieldsParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list of orgs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/org"
                                    },
                                    {
                                        "$ref": "#/definitions/uuid"
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "orgs"
                ],
                "summary": "Creates an organisation",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "description": "the name of the organization",
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "303": {
                        "description": "Redirect to new organization"
                    }
                }
            }
        },
        "/orgs/{uuid}": {
            "get": {
                "tags": [
                    "orgs"
                ],
                "summary": "Reads an org",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the org",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/org"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "orgs"
                ],
                "summary": "Deletes an organization",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the org",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/orgs/{uuid}/accounting": {
            "get": {
                "tags": [
                    "orgs"
                ],
                "summary": "Read accounitng data",
                "description": "This will grab accounting data for a period between start and end.\nThe data presented will include all data points for every resource\nthat existed in this timeframe not only those in the timeframe.\nThis allows reconstructing the entire situation during the time\nframe, including resources that were created before and destroyed\nafter the period.\n",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the organization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "required": true,
                        "description": "Timestamp of the start of the accounting period",
                        "type": "integer"
                    },
                    {
                        "name": "end",
                        "in": "query",
                        "required": true,
                        "description": "Timestamp of the end of the accounting period",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cdr"
                        }
                    }
                }
            }
        },
        "/orgs/{uuid}/triggers/user_create": {
            "put": {
                "tags": [
                    "orgs"
                ],
                "summary": "Creates a user create trigger",
                "description": "This trigger is executed when a new user is created from someone\nwho belongs to an org\n",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the organization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "action": {
                                    "description": "Action to be performed, one of 'join_role', 'join_org',\n'role_grant' and 'user_grant'\n",
                                    "type": "string"
                                },
                                "target": {
                                    "description": "For 'join_*' actions the role or org to be joined, for\n'*_grant' the role or user the permission to be granted to\n",
                                    "type": "string"
                                },
                                "base": {
                                    "description": "For '*_grant' triggers, the base of the permissions to\nbe granted\n",
                                    "type": "string"
                                },
                                "permission": {
                                    "description": "The rest of the permission to be granted",
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "303": {
                        "description": "Redirect to org"
                    }
                }
            }
        },
        "/orgs/{uuid}/triggers/dataset_create": {
            "post": {
                "tags": [
                    "orgs"
                ],
                "summary": "Creates a user dataset trigger",
                "description": "This trigger is executed when a new dataset is created from someone\nwho belongs to this org\n",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the organization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "action": {
                                    "description": "Action to be performed, one of 'join_role', 'join_org',\n'role_grant' and 'user_grant'\n",
                                    "type": "string"
                                },
                                "target": {
                                    "description": "For 'join_*' actions the role or org to be joined, for\n'*_grant' the role or user the permission to be granted to\n",
                                    "type": "string"
                                },
                                "base": {
                                    "description": "For '*_grant' triggers, the base of the permissions to\nbe granted\n",
                                    "type": "string"
                                },
                                "permission": {
                                    "description": "The rest of the permission to be granted",
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "303": {
                        "description": "Redirect to org"
                    }
                }
            }
        },
        "/orgs/{uuid}/triggers/vm_create": {
            "put": {
                "tags": [
                    "orgs"
                ],
                "summary": "Creates a user vm trigger",
                "description": "This trigger is executed when a new VM is created by someone who\nbelongs to this org\n",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the organization",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "action": {
                                    "description": "Action to be performed, one of 'join_role', 'join_org',\n'role_grant' and 'user_grant'\n",
                                    "type": "string"
                                },
                                "target": {
                                    "description": "For 'join_*' actions the role or org to be joined, for\n'*_grant' the role or user the permission to be granted to\n",
                                    "type": "string"
                                },
                                "base": {
                                    "description": "For '*_grant' triggers, the base of the permissions to\nbe granted\n",
                                    "type": "string"
                                },
                                "permission": {
                                    "description": "The rest of the permission to be granted",
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "303": {
                        "description": "Redirect to org"
                    }
                }
            }
        },
        "/orgs/{uuid}/triggers/{trigger-id}": {
            "delete": {
                "tags": [
                    "orgs"
                ],
                "summary": "Deletes a trigger from an organization",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the org",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "trigger-id",
                        "in": "path",
                        "description": "trigger to be deleted",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/orgs/{uuid}/resources/{resource}": {
            "put": {
                "tags": [
                    "orgs"
                ],
                "summary": "Set org resources",
                "description": "Increases or decreases resources for an org.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the org",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "resource",
                        "in": "path",
                        "description": "Name of the resoruces",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "dec": {
                                    "description": "Amount on how much to decrease the given resourcs\n",
                                    "type": "integer"
                                },
                                "inc": {
                                    "description": "Amount on how much to increase the given resourcs\n",
                                    "type": "integer"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OK"
                    }
                }
            }
        },
        "/orgs/{uuid}/docker/networks/{scope}": {
            "put": {
                "tags": [
                    "orgs"
                ],
                "summary": "Links a docker network",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the org",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "Network type, either 'public' or 'private'",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "public",
                            "private"
                        ]
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "network": {
                                    "description": "The UUID of the network to add\n",
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OK"
                    }
                }
            }
        },
        "/groupings": {
            "get": {
                "tags": [
                    "groupings"
                ],
                "summary": "list groupings",
                "description": "Lists all `Groupings` visible to the user, either by uuid or objects.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/fulllistParam"
                    },
                    {
                        "$ref": "#/parameters/fulllistfieldsParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list of groupings",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/grouping"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/groupings/{uuid}": {
            "get": {
                "tags": [
                    "groupings"
                ],
                "summary": "read grouping",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the grouping to get",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns a grouping",
                        "schema": {
                            "$ref": "#/definitions/grouping"
                        }
                    }
                }
            }
        },
        "/groupings/{uuid}/elements/{other}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "description": "uuid of the grouping to modify",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "other",
                    "in": "path",
                    "description": "uuid of the grouping to add",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "tags": [
                    "groupings"
                ],
                "summary": "add an element to the grouping",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "tags": [
                    "groupings"
                ],
                "summary": "remove an vm from the grouping",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/groupings/{uuid}/config/{path}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "description": "uuid of the grouping to modify",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "path",
                    "in": "path",
                    "description": "path of the configuration key",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "tags": [
                    "groupings"
                ],
                "summary": "Sets configuration value for a grouping",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "tags": [
                    "groupings"
                ],
                "summary": "Removes grouping configuration",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/groupings/{uuid}/metadata/{path}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "description": "uuid of the grouping to modify",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "path",
                    "in": "path",
                    "description": "path of the metadata key",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "tags": [
                    "groupings"
                ],
                "summary": "Sets metadata value for a grouping",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "tags": [
                    "groupings"
                ],
                "summary": "Removes grouping metadata",
                "responses": {
                    "200": {
                        "description": "OK'"
                    }
                }
            }
        },
        "/datasets": {
            "get": {
                "tags": [
                    "datasets"
                ],
                "summary": "Lists all Datasets visible to the user",
                "description": "See Get Dataset for the fields available for 'full-list-fields'\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/fulllistParam"
                    },
                    {
                        "$ref": "#/parameters/fulllistfieldsParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list of datasets",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/dataset"
                                    },
                                    {
                                        "$ref": "#/definitions/uuid"
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "datasets"
                ],
                "summary": "Imports a dataset form a imgapi compatible server",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "url": {
                                    "description": "url of the manifest to import",
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "303": {
                        "description": "Redirect to new org"
                    }
                }
            }
        },
        "/datasets/{uuid}": {
            "get": {
                "tags": [
                    "datasets"
                ],
                "summary": "Reads a Dataset",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the datasets",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dataset"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "datasets"
                ],
                "summary": "Reads a Dataset",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the datasets",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "put": {
                "tags": [
                    "datasets"
                ],
                "summary": "Upload a manifest",
                "description": "This is the 1st step of a dataset import from a local file\n",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the dataset to import",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "303": {
                        "description": "Redirect to new org"
                    }
                }
            }
        },
        "/datasets/{uuid}/dataset.gz": {
            "get": {
                "tags": [
                    "datasets"
                ],
                "summary": "Downloads a zVol",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the datasets",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "put": {
                "tags": [
                    "datasets"
                ],
                "summary": "Uploads a zvol",
                "description": "This is the 2nd step of a dataset import from a local file\n",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the dataset to import",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "303": {
                        "description": "Redirect to new org"
                    }
                }
            }
        },
        "/datasets/{uuid}/networks/{nic}": {
            "put": {
                "tags": [
                    "datasets"
                ],
                "summary": "Adds or modifies a nic on the dataset",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the dataset to import",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "nic",
                        "in": "path",
                        "description": "name of the nic to add (i.e. 'net1')",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "description": {
                                    "description": "description of the interface",
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "tags": [
                    "datasets"
                ],
                "summary": "Adds or modifies a nic on the dataset",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the dataset to import",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "nic",
                        "in": "path",
                        "description": "name of the nic to add (i.e. 'net1')",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/hypervisors": {
            "get": {
                "tags": [
                    "hypervisors"
                ],
                "summary": "lists all hypervisors visible to the user",
                "description": "See 'get hypervisor' for the fields available for 'full-list-fields'\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/fulllistParam"
                    },
                    {
                        "$ref": "#/parameters/fulllistfieldsParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list of hypervisors",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/hypervisor"
                                    },
                                    {
                                        "$ref": "#/definitions/uuid"
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/hypervisors/{uuid}": {
            "get": {
                "tags": [
                    "hypervisors"
                ],
                "summary": "reads a hypervisor",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the hypervisor",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns an hypervisor",
                        "schema": {
                            "$ref": "#/definitions/hypervisor"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "hypervisors"
                ],
                "summary": "deletes a hypervisor.",
                "description": "Every vm still residing on this hypervisor\nwill either be put in 'limbo' when at least one full backup exists,\nor be deleted if not.\n",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the hypervisor",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            }
        },
        "/hypervisors/{uuid}/characteristics/{path}": {
            "put": {
                "tags": [
                    "hypervisors"
                ],
                "summary": "Sets a hypervisor characteristic.",
                "description": "this can be later used on rules to match against.\n",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the hypervisor",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "path",
                        "in": "path",
                        "description": "url path prefix of the characteristic",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            },
            "delete": {
                "tags": [
                    "hypervisors"
                ],
                "summary": "removes a characteristic from a hypervisor",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the hypervisor",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "path",
                        "in": "path",
                        "description": "url path to characteristic to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            }
        },
        "/hypervisors/{uuid}/config": {
            "put": {
                "tags": [
                    "hypervisors"
                ],
                "summary": "sets a configuration / alias of the hypervisor",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the hypervisor",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "alias": {
                                    "description": "new alias of the hypervisor",
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            }
        },
        "/hypervisors/{uuid}/metrics": {
            "get": {
                "tags": [
                    "hypervisors"
                ],
                "summary": "Reads a VM",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the hypervisor",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns metrics for the hypervisor",
                        "schema": {
                            "$ref": "#/definitions/metrics"
                        }
                    },
                    "503": {
                        "description": "No metric server."
                    }
                }
            }
        },
        "/ipranges": {
            "get": {
                "tags": [
                    "ipranges"
                ],
                "summary": "Lists all IP Ranges visible to the user",
                "description": "See Get IP Range for the fields available for 'full-list-fields'\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/fulllistParam"
                    },
                    {
                        "$ref": "#/parameters/fulllistfieldsParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list of ipranges",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/iprange"
                                    },
                                    {
                                        "$ref": "#/definitions/uuid"
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "ipranges"
                ],
                "summary": "Creates a new ip range",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "description": "name of the  ip range",
                                    "type": "string"
                                },
                                "tag": {
                                    "description": "NIC Tag for the IP Range to use",
                                    "type": "string"
                                },
                                "subnet": {
                                    "description": "The network address of the subnet",
                                    "type": "string"
                                },
                                "netmask": {
                                    "description": "The netmask of the subnet",
                                    "type": "string"
                                },
                                "gateway": {
                                    "description": "The gateway of the subnet",
                                    "type": "string"
                                },
                                "first": {
                                    "description": "First address to hand out (must be part of subnet!)",
                                    "type": "string"
                                },
                                "last": {
                                    "description": "Last address to hand out (must be part of subnet!)",
                                    "type": "string"
                                },
                                "vlan": {
                                    "description": "VLan to tag the nics with",
                                    "type": "integer"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "303": {
                        "description": "Redirect to new org"
                    }
                }
            }
        },
        "/ipranges/{uuid}": {
            "get": {
                "tags": [
                    "ipranges"
                ],
                "summary": "Reads a IP Range",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the ip range",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/iprange"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "ipranges"
                ],
                "summary": "Claims an IP Address from the range",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the ip range",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/ipranges/{uuid}/{ip}": {
            "put": {
                "tags": [
                    "ipranges"
                ],
                "summary": "Releases an IP",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the ip range",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "ip",
                        "in": "path",
                        "description": "IP Address to release",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/networks": {
            "get": {
                "tags": [
                    "networks"
                ],
                "summary": "Lists all networks visible to the user.",
                "description": "See 'Get Network' for the fields available for 'full-list-fields'\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/fulllistParam"
                    },
                    {
                        "$ref": "#/parameters/fulllistfieldsParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list of networks",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/network"
                                    },
                                    {
                                        "$ref": "#/definitions/uuid"
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "networks"
                ],
                "summary": "Creates a new network",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "description": "name of the network",
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "303": {
                        "description": "Redirect to new org"
                    }
                }
            }
        },
        "/networks/{uuid}": {
            "get": {
                "tags": [
                    "networks"
                ],
                "summary": "reads a network",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the network",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list of networks",
                        "schema": {
                            "$ref": "#/definitions/uuid"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "networks"
                ],
                "summary": "deletes a network",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the network",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/networks/{uuid}/iprange/{iprange}": {
            "put": {
                "tags": [
                    "networks"
                ],
                "summary": "Adds an iprange to a network",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the user to delete",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "iprange",
                        "in": "path",
                        "description": "uuid of the iprange to add",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "tags": [
                    "networks"
                ],
                "summary": "Removes an IP Range from an network",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the user to delete",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "iprange",
                        "in": "path",
                        "description": "uuid of the iprange to add",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/packages": {
            "get": {
                "tags": [
                    "packages"
                ],
                "summary": "Lists all Packages visible to the user",
                "description": "See Get Package for the fields available for full-list-fields.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/fulllistParam"
                    },
                    {
                        "$ref": "#/parameters/fulllistfieldsParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list of packages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/package"
                                    },
                                    {
                                        "$ref": "#/definitions/uuid"
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "packages"
                ],
                "summary": "Creates a new package.",
                "description": "Requirements\n'requirements' is an array of objects as with the following atributes:\n'WEIGHT'\nA number (positive or negative) or the string \"most\", \"cant\" for strong\nenforcement or \"scale\" and \"random\" must, cant, and <number> rules\nThis rules simply compare an attribute of the hypervisor against a\nvalue and either enforces a the rule (must/cant) or gives out points,\nboth positive and negative to rate the found hypervisors.\nattribute\nThe attribute to check on the hypervisors, this can be a json like\npath so for example \"characteristics.colour\" will look up colour in\nthe hypervisors characteristics\nValue\nThe value to check against, this can be a number, a string, or an array.\ncondition\nOne of:\n>=, > - Checks if the value of attribute is larger (or equal) to the\nvalue\n=<, < - Checks if the value of attribute is smaller (or equal) to the\nvalue\n=:= - Checks if the value of attribute is equal to the value\n=/= - Checks if the value of attribute is not equal to the value\n\"subset\" - Checks if the value of attribute is a subset of value\n(requires value to be an array)\n\"superset\" - Checks if the value of attribute is a subset of value\n(requires value to be an array)\n\"disjoint\" - Checks if the value of attribute is a subset of value\n(requires value to be an array)\n\"element\" - Checks if the value of attribute is a subset of value\n(requires value to be an array)\n\"allowed\" - Checks if the value of attribute is a subset of value\n(requires value to be an array)\nscale rules\nThis rules linearly map an attributes value onto a given scale and\ngive the result as points for hypervisor selection.\nattribute\nThe attribute to check on the hypervisors, this can be a json like\npath so for example \"characteristics.cores\" will look up cores in the\nhypervisors characteristics This must be an numeric value towork\nlow, and high\nThe lowest and highest number of the scale, to map against.\nrandom ruleS\nThis rules simply generate a random number on a given scale, this\nallows making non deterministic rules. The resulting number is used\nas points for hypervisor selection.\nlow, and high\nThe lowest and highest number the random number is generated from.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "description": "Name of the package",
                                    "type": "string"
                                },
                                "quota": {
                                    "description": "'GB' of quota to give the package, for KVM this applies as\nsecondary disk\n",
                                    "type": "integer"
                                },
                                "ram": {
                                    "description": "MB of memory for the",
                                    "type": "integer"
                                },
                                "cpu_cap": {
                                    "description": "% of CPU cores to give the zone",
                                    "type": "integer"
                                },
                                "cpu_shares": {
                                    "description": "Shares of CPU time when two zones compete. (Defaults to\n% of memory)\n",
                                    "type": "string"
                                },
                                "zfs_io_priority": {
                                    "description": "ZFS Priority if zones are competing. (Defaults to % of\nmemory)\n",
                                    "type": "integer"
                                },
                                "blicksize": {
                                    "description": "Block size for KVM",
                                    "type": "integer"
                                },
                                "compression": {
                                    "description": "Compression used for the ZFS volume",
                                    "type": "string"
                                },
                                "requirements": {
                                    "description": "A list of rules to create",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/requirement"
                                    }
                                },
                                "org_resources": {
                                    "description": "A mapping between resource name and claim",
                                    "type": "object"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            }
        },
        "/packages/{uuid}": {
            "get": {
                "tags": [
                    "packages"
                ],
                "summary": "Reads a Package",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the package",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/package"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "packages"
                ],
                "summary": "Deletes a Package",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the package",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/vms": {
            "get": {
                "tags": [
                    "vms"
                ],
                "summary": "lists all vms visible to the user",
                "description": "see get vm for the fields available for 'full-list-fields'\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/fulllistParam"
                    },
                    {
                        "$ref": "#/parameters/fulllistfieldsParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list of vms",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/vm"
                                    },
                                    {
                                        "$ref": "#/definitions/uuid"
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "vms"
                ],
                "summary": "Queue a new VM creation.",
                "description": "Most of the keys in config\nare self-explanatory the one noteworthy is networks however. it is\na map of nics (provided by the dataset) to UUIDs of networks (\nnot ip ranges!).\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "package": {
                                    "description": "uuid of the package to use for the vm",
                                    "type": "string"
                                },
                                "dataset": {
                                    "description": "uuid of the dataset to use for the vm",
                                    "type": "string"
                                },
                                "config": {
                                    "description": "object with additional",
                                    "type": "object",
                                    "properties": {
                                        "hostname": {
                                            "type": "string"
                                        },
                                        "alias": {
                                            "type": "string"
                                        },
                                        "requirements": {
                                            "description": "Additional requirements",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/requirement"
                                            }
                                        },
                                        "routes": {
                                            "description": "List of routs, each rout is a object of the with 1 element\nthe network as a key the router as the value.\n",
                                            "type": "object"
                                        },
                                        "resolvers": {
                                            "description": "List of resolvers",
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "delegate_dataset": {
                                            "description": "Enable a delegated dataset",
                                            "type": "boolean"
                                        },
                                        "grouping": {
                                            "description": "Cluster this VM is going to be placed in",
                                            "type": "string"
                                        },
                                        "hostnames": {
                                            "description": "A object mapping nic (i.e. net0) to a hostname",
                                            "type": "object"
                                        },
                                        "metadata": {
                                            "description": "Metadata to attatch, needs to be flat",
                                            "type": "object"
                                        },
                                        "networks": {
                                            "description": "A object mapping nic (i.e. net0) to a netowrk uuids",
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "303": {
                        "description": "redirect to new org"
                    }
                }
            }
        },
        "/vms/{uuid}": {
            "get": {
                "tags": [
                    "vms"
                ],
                "summary": "reads a vm",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns an vms",
                        "schema": {
                            "$ref": "#/definitions/vm"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "vms"
                ],
                "summary": "deletes a vm",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            }
        },
        "/vms/dry_run": {
            "post": {
                "tags": [
                    "vms"
                ],
                "summary": "Dry run VM creation",
                "description": "This is the same as the normal Create an VM request however it stops\nbefore sending the request to the hypervisor. So no VM is ever created\nhowever it does check if the VM could be created.\nIt needs to be noted that both false positives and false negatives\ncan occur so this is a good approximation but should not be taken as\na definite. False positive are more likely then false negatives.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "package": {
                                    "description": "uuid of the package to use for the vm",
                                    "type": "string"
                                },
                                "dataset": {
                                    "description": "uuid of the dataset to use for the vm",
                                    "type": "string"
                                },
                                "config": {
                                    "description": "object with aditional",
                                    "type": "object"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ok"
                    }
                }
            }
        },
        "/vms/{uuid}/state": {
            "put": {
                "tags": [
                    "vms"
                ],
                "summary": "initiates a vm state change for the vm",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "action": {
                                    "description": "One of 'start', 'stop' or 'reboot'.",
                                    "type": "string"
                                },
                                "force": {
                                    "description": "Used for 'stop' and 'reboot' determines if the shutdown\nshould be graceful or forced\n",
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            }
        },
        "/vms/{uuid}/console": {
            "put": {
                "tags": [
                    "vms"
                ],
                "summary": "executes a single command on the zones console",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "command": {
                                    "description": "The command to execute",
                                    "type": "string"
                                },
                                "args": {
                                    "description": "An array of arguments to pass to the command",
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exit_code": {
                                    "type": "integer",
                                    "description": "Exit code of the command executed"
                                },
                                "output": {
                                    "type": "string",
                                    "description": "Output of the command (stdout,stderr combined)"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/vms/{uuid}/package": {
            "put": {
                "tags": [
                    "vms"
                ],
                "summary": "initiates a vm state change for the vm",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "action": {
                                    "description": "One of 'start', 'stop' or 'reboot'",
                                    "type": "string",
                                    "enum": [
                                        "start",
                                        "stop",
                                        "reboot"
                                    ]
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            }
        },
        "/vms/{uuid}/config": {
            "put": {
                "tags": [
                    "vms"
                ],
                "summary": "updates the config for the vm",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "hostname": {
                                    "description": "the hostname of the vm",
                                    "type": "string"
                                },
                                "alias": {
                                    "description": "the vm’s alias",
                                    "type": "string"
                                },
                                "resolvers": {
                                    "description": "list of VM’s resolvers",
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "autoboot": {
                                    "description": "whether the vm boots automatically or not",
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            }
        },
        "/vms/{uuid}/owner": {
            "put": {
                "tags": [
                    "vms"
                ],
                "summary": "changes the owner of the vm",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "org": {
                                    "description": "new owner",
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            }
        },
        "/vms/{uuid}/nics": {
            "post": {
                "tags": [
                    "vms"
                ],
                "summary": "adds a new nic to a vm",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "network": {
                                    "$ref": "#/definitions/uuid"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "303": {
                        "description": "Redirect to the changed VM"
                    }
                }
            }
        },
        "/vms/{uuid}/nics/{mac}": {
            "delete": {
                "tags": [
                    "vms"
                ],
                "summary": "removes a nic from a vm",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "mac",
                        "in": "path",
                        "required": true,
                        "description": "mac address of the nic to remove",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "adds a new nic"
                    }
                }
            }
        },
        "/vms/{uuid}/hostname/{nic}": {
            "put": {
                "tags": [
                    "vms"
                ],
                "summary": "Sets the hostname of a nice, setting it empty removes it.",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "nic",
                        "in": "path",
                        "required": true,
                        "description": "name of the nic for wich the hostname shoulld be set",
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "hostname": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "sets the hostname"
                    }
                }
            }
        },
        "/vms/{uuid}/fw_rules": {
            "post": {
                "tags": [
                    "vms"
                ],
                "description": "Creates a firewall rule of the VM. One side is always the current VM\nthe other side can be defined in 'target'.\nTARGET\nthe string \"all\" for all targets.\nan object with the key 'ip' and the IP address in a string as value\nfor a single IP target.\nan object with the key 'subnet' with the base address of the subnet\nas string, and key 'mask' with a number indicating the relevant bits\nas value for a subnet as target.\nFILTERS\nA list of one or more ports for UDP and TCP.\nThe string \"all\" for UDP and TCP.\na list of objects containing the key 'type' and optionally 'code',\nboth with numbers as values for ICMP.\n",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "action": {
                                    "description": "the action of the rule either 'block' or 'allow'",
                                    "type": "string"
                                },
                                "direction": {
                                    "description": "the direction of the rule, either 'inbound' or 'outbound'",
                                    "type": "string"
                                },
                                "target": {
                                    "description": "The other side of the rule",
                                    "type": "string"
                                },
                                "protocol": {
                                    "description": "the protocol to match, either 'tcp', 'udp' or 'icmp'",
                                    "type": "string"
                                },
                                "filters": {
                                    "description": "the filter to narrow down the match",
                                    "type": "object"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "303": {
                        "description": "Redirect to new org"
                    }
                }
            }
        },
        "/vms/{uuid}/fw_rules/{rule_id}": {
            "post": {
                "tags": [
                    "vms"
                ],
                "description": "deletes a firewall rule for the VM uuid, the rule id can be found in\nthe 'rule_id' field of the rule\n",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "rule_id",
                        "in": "path",
                        "description": "the rule to remove",
                        "type": "integer",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            }
        },
        "/vms/{uuid}/snapshots": {
            "post": {
                "tags": [
                    "vms"
                ],
                "summary": "creates a zfs snapshot of the vm",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "comment": {
                                    "description": "comment for the snapshot",
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "303": {
                        "description": "Redirect to new org"
                    }
                }
            }
        },
        "/vms/{uuid}/snapshots/{snap-id}": {
            "put": {
                "tags": [
                    "vms"
                ],
                "summary": "Roll back ZFS snapshot",
                "description": "This will roll back a zfs snapshot and delete all snapshots newer\nthen the snapshot.\nPlease note that ZFS snapshots do not allow keeping snapshots newer\nthat a rolled back snapshots so those will be deleted. Please use\nbackups of this is a feature you need\n",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "snap-id",
                        "in": "path",
                        "description": "uuid of the snapshot to restore",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "action": {
                                    "description": "needs to be 'rollback'",
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            }
        },
        "/vms/{uuid}/nis/{snap-id}": {
            "delete": {
                "tags": [
                    "vms"
                ],
                "summary": "Deletes a Snapshot.",
                "description": "Newer snapshots will not be affected other then\ntheir size night change.\n",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "snap-id",
                        "in": "path",
                        "description": "uuid of the snapshot",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            }
        },
        "/vms/{uuid}/backups": {
            "post": {
                "tags": [
                    "vms"
                ],
                "summary": "Creates a ZFS snapshot stored in LeoFS",
                "description": "Creates a ZFS snapshot and sends it to to LeoFS. Both\nincremental and full backups can be created. If a incremental backup\nis done the parent must be local.\nIn incremental backup here means that a incremental ZFS send is done\nwith the parent as parent.\nThe following files are created in LeoFS:\n<vm-uuid>/<backup-uuid> - the gzip compressed ZFS snapshot\n<vm-uuid>/<backup-uuid>.xml - the zone config XML file from /etc/zones/<vm-uuid>.xml\n<vm-uuid>/<backup-uuid>.parent - UUID of the parent snapshot if this is a incremental backup.\n",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "comment": {
                                    "description": "comment for the snapshot",
                                    "type": "string"
                                },
                                "parent": {
                                    "description": "uuid of the parent snapshot (needs to be local)",
                                    "type": "string"
                                },
                                "delete": {
                                    "description": "If 'parent' is given weather the Parent will be deleted from\nthe hypervisor after uploading the backup. If 'parent' is not\nprovided wether the backup itself will be deleted after\nit is uploaded.\n",
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "303": {
                        "description": "Redirect to new org"
                    }
                }
            }
        },
        "/vms/{uuid}/backups/{backup-id}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "description": "uuid of the vm",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "backup-id",
                    "in": "path",
                    "description": "uuid of the backup to restore",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "tags": [
                    "vms"
                ],
                "summary": "Verifies backup integrety.",
                "description": "This will check the sha1 hash of the storeed backup, to do this the\nbackup is internally streamed and a new sha1 is calcualated. Both\nold and new values are then returned.\n",
                "responses": {
                    "200": {
                        "description": "The calculation could be performed, please not that this does not mean\nthat the sha sums are matching, just that the calculation could be performed.\n"
                    }
                }
            },
            "put": {
                "tags": [
                    "vms"
                ],
                "summary": "Restore a backup.",
                "description": "This restores a backup in the process the entire zfs volume might be\ndestroyed and re-created, all snapshots will be deleted!\nIf the VM is 'in limbo' so not deployed to a hypervisor right now, it\nis possible to select the hypervisor it is re-deployed to.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "action": {
                                    "description": "needs to be 'rollback' or 'restore'. rules and package are\nonly valid for restore\n",
                                    "type": "string",
                                    "enum": [
                                        "rollback",
                                        "restore"
                                    ]
                                },
                                "rules": {
                                    "description": "Additional rules for the restore",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/requirement"
                                    }
                                },
                                "package": {
                                    "$ref": "#/definitions/uuid"
                                }
                            },
                            "required": [
                                "action"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            },
            "delete": {
                "tags": [
                    "vms"
                ],
                "summary": "Deletes a Backup",
                "description": "Deletes a Backup, this will also delete all files on LeoFS related\nto this backup. This will also delete all children of this backup\nsince the restore can no longer happen without the parent. However\nother backups who are not in the child path of this backup will not\nbe affected, not even if they are newer.\n",
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            }
        },
        "/vms/{uuid}/services": {
            "put": {
                "tags": [
                    "vms"
                ],
                "summary": "Changes the service state",
                "description": "See man svcadm for more information.\n",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the vm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "service": {
                                    "description": "The service identifier",
                                    "type": "string"
                                },
                                "action": {
                                    "description": "one of `enable`, `disable`, `clear`, `restart`, and `refresh`\n",
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            }
        },
        "/vms/{uuid}/metrics": {
            "get": {
                "tags": [
                    "vms"
                ],
                "summary": "Reads a VM",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the hypervisor",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns metrics for the hypervisor",
                        "schema": {
                            "$ref": "#/definitions/metrics"
                        }
                    },
                    "503": {
                        "description": "No metric server."
                    }
                }
            }
        },
        "/vms/{uuid}/hypervisor": {
            "delete": {
                "tags": [
                    "vms"
                ],
                "summary": "Deletes a vm from the hypervisor to put it in 'limbo'",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "uuid of the vm",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            }
        }
    }
}
