swagger: '2.0'
basePath: /api/3/vms
consumes:
  - applicaiton/json
produces:
  - applicaiton/json
info:
  version: 3.0.0
  title: VMs
###################
# PARAMETERS
###################
parameters:
  fulllistParam:
    name: full-list
    in: query
    description: Enables or disables the return ov objects rather then uuids
    required: false
    allowEmptyValue: false
    type: boolean
    format: boolean
  fulllistfieldsParam:
    name: full-list-fields
    in: query
    description: Fields to be returnd when full-list is enabled
    required: false
    format: string
    type: array
    items:
      type: string
    collectionFormat: csv

###################
# DEFINITIONS
###################
definitions:
  uuid:
    type: string
    pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
  metrics:
    type: object
    properties:
      '<key>':
        type: array
        items:
          type: integer
  requirement:
    allOf:
      - type: object
        properties:
          weight:
            type: string
            enum:
              - 'scale'
          attribute:
            type: string
          low:
            type: integer
          high:
            type: integer
      - type: object
        properties:
          weight:
            type: string
            enum:
              - 'random'
          low:
            type: integer
          high:
            type: integer
      - type: object
        properties:
          attribute:
            type: string
          condition:
            type: string
            enum:
              - '>='
              - '=<'
              - '>'
              - '<'
              - '=:='
              - '=/='
              - 'superset'
              - 'subset'
              - 'disjoint'
              - 'element'
          value:
            allOf:
              - type: string
              - type: integer
              - type: array
                items:
                  type: integer
              - type: array
                items:
                  type: string
          weight:
            allOf:
              - type: string
                enum:
                  - must
                  - cant
              - type: integer
  vm:
    type: object
    properties:
      alias:
        type: string
      backups:
        type: object
        properties:
          comment:
            type: string
          files:
            type: object
            properties:
              '<file>':
                type: object
                properties:
                  sha1:
                    type: string
                  size:
                    type: integer
          local:
            type: boolean
          local_size:
            type: integer
          pending:
            type: boolean
          state:
            type: string
            enum:
              - completed
              - pending
          xml:
            type: boolean
      config:
        type: object
      created_at:
        type: integer
      created_by:
        $ref: '#/definitions/uuid'
      dataset:
        $ref: '#/definitions/uuid'
      hypervisor:
        $ref: '#/definitions/uuid'
      package:
        $ref: '#/definitions/uuid'
      owner:
        $ref: '#/definitions/uuid'
      hostname_mappings:
        type: object
      iprange_mappings:
        type: object
      network_mappings:
        type: object
      uuid:
        $ref: '#/definitions/uuid'
      docker:
        type: object
###################
# Path definitions
###################
paths:
  #------------------
  # VMs
  #------------------
  '/':
    get:
      summary: lists all vms visible to the user
      description: |
        see get vm for the fields available for 'full-list-fields'
      parameters:
        - $ref: '#/parameters/fulllistParam'
        - $ref: '#/parameters/fulllistfieldsParam'
      responses:
        '200':
          description: list of vms
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/definitions/vm'
                - $ref: '#/definitions/uuid'
    post:
      summary: Queue a new VM creation.
      description: |
        Most of the keys in config
        are self-explanatory the one noteworthy is networks however. it is
        a map of nics (provided by the dataset) to UUIDs of networks (
        not ip ranges!).
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              package:
                description: uuid of the package to use for the vm
                type: string
              dataset:
                description: uuid of the dataset to use for the vm
                type: string
              config:
                description: object with additional
                type: object
                properties:
                  hostname:
                    type: string
                  alias:
                    type: string
                  requirements:
                    description: Additional requirements
                    type: array
                    items:
                      $ref: '#/definitions/requirement'
                  routes:
                    description: |
                      List of routs, each rout is a object of the with 1 element
                      the network as a key the router as the value.
                    type: object
                  resolvers:
                    description: List of resolvers
                    type: array
                    items:
                      type: string
                  delegate_dataset:
                    description: Enable a delegated dataset
                    type: boolean
                  grouping:
                    description: Cluster this VM is going to be placed in
                    type: string
                  hostnames:
                    description: A object mapping nic (i.e. net0) to a hostname
                    type: object
                  metadata:
                    description: Metadata to attatch, needs to be flat
                    type: object
                  networks:
                    description: A object mapping nic (i.e. net0) to a netowrk uuids
                    type: object
      responses:
        '303':
          description: redirect to new org
  '/{uuid}':
    get:
      summary: reads a vm
      parameters:
        - name: uuid
          in: path
          description: uuid of the vm
          required: true
          type: string
      responses:
        '200':
          description: returns an vms
          schema:
            $ref: '#/definitions/vm'
    delete:
      summary: deletes a vm
      parameters:
        - name: uuid
          in: path
          description: uuid of the vm
          required: true
          type: string
      responses:
        '200':
          description: ok
  '/dry_run':
    post:
      summary: Dry run VM creation
      description: |
        This is the same as the normal Create an VM request however it stops
        before sending the request to the hypervisor. So no VM is ever created
        however it does check if the VM could be created.
        It needs to be noted that both false positives and false negatives
        can occur so this is a good approximation but should not be taken as
        a definite. False positive are more likely then false negatives.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              package:
                description: uuid of the package to use for the vm
                type: string
              dataset:
                description: uuid of the dataset to use for the vm
                type: string
              config:
                description: object with aditional
                type: object
      responses:
        '201':
          description: ok
  '/{uuid}/state':
    put:
      summary: initiates a vm state change for the vm
      parameters:
        - name: uuid
          in: path
          description: uuid of the vm
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              action:
                description: One of 'start', 'stop' or 'reboot'.
                type: string
              force:
                description: |
                  Used for 'stop' and 'reboot' determines if the shutdown
                  should be graceful or forced
                type: boolean
      responses:
        '200':
          description: ok
  '/{uuid}/console':
    put:
      summary: executes a single command on the zones console
      parameters:
        - name: uuid
          in: path
          description: uuid of the vm
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              command:
                description: The command to execute
                type: string
              args:
                description: An array of arguments to pass to the command
                type: array
                items:
                  type: string
      responses:
        '200':
          description: ok
          schema:
            type: object
            properties:
              exit_code:
                type: integer
                description: Exit code of the command executed
              output:
                type: string
                description: Output of the command (stdout,stderr combined)
  '/{uuid}/package':
    put:
      summary: initiates a vm state change for the vm
      parameters:
        - name: uuid
          in: path
          description: uuid of the vm
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              action:
                description: One of 'start', 'stop' or 'reboot'
                type: string
                enum:
                  - start
                  - stop
                  - reboot
      responses:
        '200':
          description: ok
  '/{uuid}/config':
    put:
      summary: updates the config for the vm
      parameters:
        - name: uuid
          in: path
          description: uuid of the vm
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              hostname:
                description: the hostname of the vm
                type: string
              alias:
                description: the vm’s alias
                type: string
              resolvers:
                description: list of VM’s resolvers
                type: array
                items:
                  type: string
              autoboot:
                description: whether the vm boots automatically or not
                type: boolean
      responses:
        '200':
          description: ok
  '/{uuid}/owner':
    put:
      summary: changes the owner of the vm
      parameters:
        - name: uuid
          in: path
          description: uuid of the vm
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              org:
                description: new owner
                type: string
      responses:
        '200':
          description: ok
  '/{uuid}/nics':
    post:
      summary: adds a new nic to a vm
      parameters:
        - name: uuid
          in: path
          description: uuid of the vm
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              network:
                $ref: '#/definitions/uuid'
      responses:
        '303':
          description: Redirect to the changed VM
  '/{uuid}/nics/{mac}':
    delete:
      summary: removes a nic from a vm
      parameters:
        - name: uuid
          in: path
          description: uuid of the vm
          required: true
          type: string
        - name: mac
          in: path
          required: true
          description: mac address of the nic to remove
          type: string
      responses:
        '200':
          description: adds a new nic
  '/{uuid}/hostname/{nic}':
    put:
      summary: Sets the hostname of a nice, setting it empty removes it.
      parameters:
        - name: uuid
          in: path
          description: uuid of the vm
          required: true
          type: string
        - name: nic
          in: path
          required: true
          description: name of the nic for wich the hostname shoulld be set
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              hostname:
                type: string
      responses:
        '200':
          description: sets the hostname
  '/{uuid}/fw_rules':
    post:
      description: |
        Creates a firewall rule of the VM. One side is always the current VM
        the other side can be defined in 'target'.
        TARGET
        the string "all" for all targets.
        an object with the key 'ip' and the IP address in a string as value
        for a single IP target.
        an object with the key 'subnet' with the base address of the subnet
        as string, and key 'mask' with a number indicating the relevant bits
        as value for a subnet as target.
        FILTERS
        A list of one or more ports for UDP and TCP.
        The string "all" for UDP and TCP.
        a list of objects containing the key 'type' and optionally 'code',
        both with numbers as values for ICMP.
      parameters:
        - name: uuid
          in: path
          description: uuid of the vm
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              action:
                description: the action of the rule either 'block' or 'allow'
                type: string
              direction:
                description: the direction of the rule, either 'inbound' or 'outbound'
                type: string
              target:
                description: The other side of the rule
                type: string #TODO: Verify
              protocol:
                description: the protocol to match, either 'tcp', 'udp' or 'icmp'
                type: string
              filters:
                description: the filter to narrow down the match
                type: object
      responses:
        '303':
          description: Redirect to new org
  '/{uuid}/fw_rules/{rule_id}':
    post:
      description: |
        deletes a firewall rule for the VM uuid, the rule id can be found in
        the 'rule_id' field of the rule
      parameters:
        - name: uuid
          in: path
          description: uuid of the vm
          required: true
          type: string
        - name: rule_id
          in: path
          description: the rule to remove
          type: integer
          required: true
      responses:
        '200':
          description: ok
  '/{uuid}/snapshots':
    post:
      summary: creates a zfs snapshot of the vm
      parameters:
        - name: uuid
          in: path
          description: uuid of the vm
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              comment:
                description: comment for the snapshot
                type: string
      responses:
        '303':
          description: Redirect to new org
  '/{uuid}/snapshots/{snap-id}':
    put:
      summary: Roll back ZFS snapshot
      description: |
        This will roll back a zfs snapshot and delete all snapshots newer
        then the snapshot.
        Please note that ZFS snapshots do not allow keeping snapshots newer
        that a rolled back snapshots so those will be deleted. Please use
        backups of this is a feature you need
      parameters:
        - name: uuid
          in: path
          description: uuid of the vm
          required: true
          type: string
        - name: snap-id
          in: path
          description: uuid of the snapshot to restore
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              action:
                description: needs to be 'rollback'
                type: string
      responses:
        '200':
          description: ok
  '/{uuid}/nis/{snap-id}':
    delete:
      summary: Deletes a Snapshot.
      description: |
        Newer snapshots will not be affected other then
        their size night change.
      parameters:
        - name: uuid
          in: path
          description: uuid of the vm
          required: true
          type: string
        - name: snap-id
          in: path
          description: uuid of the snapshot
          required: true
          type: string
      responses:
        '200':
          description: ok
  '/{uuid}/backups':
    post:
      summary: Creates a ZFS snapshot stored in LeoFS
      description: |
        Creates a ZFS snapshot and sends it to to LeoFS. Both
        incremental and full backups can be created. If a incremental backup
        is done the parent must be local.
        In incremental backup here means that a incremental ZFS send is done
        with the parent as parent.
        The following files are created in LeoFS:
        <vm-uuid>/<backup-uuid> - the gzip compressed ZFS snapshot
        <vm-uuid>/<backup-uuid>.xml - the zone config XML file from /etc/zones/<vm-uuid>.xml
        <vm-uuid>/<backup-uuid>.parent - UUID of the parent snapshot if this is a incremental backup.
      parameters:
        - name: uuid
          in: path
          description: uuid of the vm
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              comment:
                description: comment for the snapshot
                type: string
              parent:
                description: uuid of the parent snapshot (needs to be local)
                type: string
              delete:
                description: |
                  If 'parent' is given weather the Parent will be deleted from
                  the hypervisor after uploading the backup. If 'parent' is not
                  provided wether the backup itself will be deleted after
                  it is uploaded.
                type: boolean
      responses:
        '303':
          description: Redirect to new org
  '/{uuid}/backups/{backup-id}':
    parameters:
      - name: uuid
        in: path
        description: uuid of the vm
        required: true
        type: string
      - name: backup-id
        in: path
        description: uuid of the backup to restore
        required: true
        type: string
    get:
      summary: Verifies backup integrety.
      description: |
        This will check the sha1 hash of the storeed backup, to do this the
        backup is internally streamed and a new sha1 is calcualated. Both
        old and new values are then returned.
      responses:
        '200':
          description: |
            The calculation could be performed, please not that this does not mean
            that the sha sums are matching, just that the calculation could be performed.
    put:
      summary: Restore a backup.
      description: |
        This restores a backup in the process the entire zfs volume might be
        destroyed and re-created, all snapshots will be deleted!
        If the VM is 'in limbo' so not deployed to a hypervisor right now, it
        is possible to select the hypervisor it is re-deployed to.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              action:
                description: |
                  needs to be 'rollback' or 'restore'. rules and package are
                  only valid for restore
                type: string
                enum:
                  - rollback
                  - restore
              rules:
                description: Additional rules for the restore
                type: array
                items:
                  $ref: '#/definitions/requirement'
              package:
                $ref: '#/definitions/uuid'
            required:
              - action
      responses:
        '200':
          description: ok
    delete:
      summary: Deletes a Backup
      description: |
        Deletes a Backup, this will also delete all files on LeoFS related
        to this backup. This will also delete all children of this backup
        since the restore can no longer happen without the parent. However
        other backups who are not in the child path of this backup will not
        be affected, not even if they are newer.
      responses:
        '200':
          description: ok
  '/{uuid}/services':
    put:
      summary: Changes the service state
      description: |
        See man svcadm for more information.
      parameters:
        - name: uuid
          in: path
          description: uuid of the vm
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              service:
                description: The service identifier
                type: string
              action:
                description: |
                  one of `enable`, `disable`, `clear`, `restart`, and `refresh`
                type: string
      responses:
        '200':
          description: ok
  '/{uuid}/metrics':
    get:
      summary: Reads a VM
      parameters:
        - name: uuid
          in: path
          description: uuid of the hypervisor
          required: true
          type: string
      responses:
        '200':
          description: returns metrics for the hypervisor
          schema:
            $ref: '#/definitions/metrics'
        '503':
          description: No metric server.
  '/{uuid}/hypervisor':
    delete:
      summary: Deletes a vm from the hypervisor to put it in 'limbo'
      parameters:
        - name: uuid
          in: path
          description: uuid of the vm
          required: true
          type: string
      responses:
        '200':
          description: ok